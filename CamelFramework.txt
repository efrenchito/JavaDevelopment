@JBOSS Fuse ->
  OSGi
 - Load only the needed module, super lightweight
 - Packaged are controlled and load by versions
 - Freedom of changes on the fly
 - Eliminate runtime exception by resolving all dependencies at deploy time
<<Management Capabilities>>
 Provides you the management capabilities, so it's going to help you to
 visualize your integration environment:
 - Allows you to create/Delete containers based on you needs
 - Deploy bundle onto containers/running instances, then it's registered in the Fabric registry
 -> Zookeper technology reliably coordinate the distributed service as a registry
 + Load Balance your HTTP or messaging services through a Gateway
   - Master/slave failover coordination
   - High availability
   - Service discovery: It's allways redirect to the working services container
      The service registry are spread across the distributed environment so every service
      inside Fabric can look up each other, recently we added 
<<Management Console>>
  Provides a extensible command line mode -> Continuance and creation scripts
  but also a visualized Management Console so you could have a centralized view and control od distributed containers.
  Also provides an overall performance view of how container is doing
  you could also manage your appointment to every bundle level
  -> Runtime Camel Route monitoring
  -> Runtime Debug on the Containers (How the flow goes, what actually went wrong inside)
  -> Manage the provisioning of your deployments
  -> Message Queue Management (How each bundle set is doing and configure the setings of each broker sets)
     MQ Monitoring (Time taken for each [message responses/routing camel], the endpoints that were exposed as a service)

@CAMEL -> Officially Apache Camel
  Is an open-source framework for message oriented-middleware with a roule-based routing and mediation engine
  that provides a Java object-based implementation of the EIP (Enterprise Integration Patterns), using an API
  (or declarative Java domain-specific language) to configure routing and mediation rules.
  The domain-specific language means that Apache Camel can support type-safe smart completion of routing rules in an integrated 
  development environment using regular Java code without large amounts of XML configuration files, though XML configuration 
  inside   Spring Framework is also supported.

    Source Code -> https://github.com/camelinaction/camelinaction
  	Creating DSLs in Java
        1: What is a domain-specific language?
	     (https://www.javaworld.com/article/2077865/core-java/core-java-creating-dsls-in-java-part-1-what-is-a-domain-specific-language.html)
	     The word domain in DSL refers to "an area or sphere of knowledge, influence, or activity." focused on a certain type of 
	     a problem or domain, and on expressing a narrow set of solutions within the context of that limited scope. The word 
	     language in the phrase may lead you to expect a DSL would use syntax to express certain semantics.
	      .A keyword input file to an application that receives input data is a DSL. 
	      .A configuration file is a DSL. 
	      .A makefile is a DSL used to specify rules and dependencies for building an application.
	        Why use a DSL?
	         A GUI makes an average user productive, but can slow down an expert user or a user very fluent with your application 
	         and its domain, now a text-driven interface, could give you more commands to work with, and ultimately more control 
	         of the application. In no time you can acomplish your work.
	        External and internal DSLs
			 A DSL may be classified as external or internal, depending on how it is designed and implemented:
			 -> An EXTERNAL or free-standing DSL is designed to be independent of any particular language. As an author of such a 
			 DSL, you pretty much decide on the syntax. You are on your own when it comes to defining the grammar and parsing the 
			 syntax. You can use any language and tools to implement your DSL -- you could use Java and ANTLR, 
			 -> An INTERNAL or embedded DSL, on the other hand, is designed and implemented using a host language. The good news 
			 is you don't have to worry about grammar, parsers, and tools to do the heavy lifting. However, you are constrained 
			 by the host language, and your DSL is influenced by its host's flexibility, limitations, and idiosyncrasies. 
			Examples of DSLs in everyday programming
			 CSS [Cascading Style Sheets]
			  One nearly omnipresent example of a DSL is Cascading Style Sheets (CSS)
			   -> A:hover { color: #FF0000; text-decoration: none; }
			    ... 
			    make: [Build automation tool (C)]
			     The makefile expresses a set of dependencies, and the commands (the indented statements) are executed based on the dependencies.
			     -> GCC=cxx -I.
				    all : clean compile
				    compile : myprog
				    myprog: MyProg.cc Util.o
				        $(GCC) -o myprog MyProg.cc Util.o
				    Util.o : Util.h Util.cc
				        $(GCC) -c Util.cc
				    clean :
				        /bin/rm -f myprog Util.o
	            Ant   [Build automation tool (Java)]
		         The Java equivalent of make is the popular Ant build file
		         -> <project name="AnExampleProject" default="jarit" basedir=".">
				    <property name="src" location="src"/>
				    <property name="build" location="build"/>
				    <property name="distrib" location="distrib"/>
				    <target name="compile" description="compile your Java code from src into build" >
				    <javac srcdir="${src}" destdir="${build}"/>
				    </target>
				    <target name="jarit" depends="compile" description="jar it up" >
				    <jar jarfile="${distrib}/AnExampleProject.jar" basedir="${build}"/>
				    </target>
				    </project>
	             => Both makefiles and Ant build files are external DSLs. 
	                In the case of Ant, the XML representation is processed by the ant utility using an XML parser.
	            Rake  [Build automation tool (Ruby)]
	             In the Ruby community, the equivalent of make and Ant is Rake. 
	             Rake is also an example of a DSL; however, it is written using Ruby itself, so it is an internal or embedded DSL.   
	             -> ORIGINAL = 'input.dat'
					BACKUP = 'input.dat.bak'
					task :default => BACKUP
					file BACKUP => ORIGINAL do |task|
					cp task.prerequisites[0], task.name
					end
			    Gant [Build automation tool (Groovy)]
			     -> #slightly modified version of example from http://gant.codehaus.org/
					includeTargets << gant.targets.Clean
					cleanPattern << [ '**/*~' , '**/*.bak' ]
					cleanDirectory << 'build'
					target (stuff : 'A target to do some stuff') {
					println 'Stuff'
					depends clean
					echo message : 'A default message from Ant'
					otherStuff()
					}
					target (otherStuff : 'A target to do some other stuff') {
					println 'OtherStuff'
					echo message : 'Another message from Ant'
					clean()
					}
					setDefaultTarget stuff
	        Using DSLs for validation
	            Validation in Rails
		          An example of validation in ActiveRecords in Rails.
		          -> class Person
				     validates_presence_of :first_name, :last_name, :ssn
					 validates_uniqueness_of :ssn
					 end
			    Validation in Grails
				  -> class State
				     {
				     String twoLetterCode
				     static constrains = {
				     twoLetterCode size: 2..2, blank: false, unique: true }
				     }
				A story in easyb
				  -> //transferMoney.story
					 scenario 'transfer money', {
					 given 'account numbers 123456789 and 123456788'
					 when 'transfer $50 from 123456789 to 123456788'
					 then 'balance of 123456789 is $50 less'
					 and
					 then 'balance of 123456788 is $50 more'
					 and
					 then 'transaction has been logged...'
					 }
	    2: Fluency and Context
	     (https://www.javaworld.com/article/2077873/core-java/core-java-creating-dsls-in-java-part-2-fluency-and-context.html)
	     ...
	    3: Internal and External DSLs
	     (https://www.javaworld.com/article/2077891/scripting-jvm-languages/scripting-jvm-languages-creating-dsls-in-java-part-3-internal-and-external-dsls.html)
	     ...
	    4: Where metaprogramming matters
	     (https://www.javaworld.com/article/2077904/scripting-jvm-languages/scripting-jvm-languages-creating-dsls-in-java-part-4-where-metaprogramming-matters.html)
	     ...

@CAMEL DEVELOPERS BOOK
 https://github.com/CamelCookbook/camel-cookbook-examples

@CAMEL IN ACTION   
Part I. First Steps
    @1.Meeting Camel          [Camel Overview and how it fits into the bigger enterprise software Picture]
      But whereas jigsaw puzzle pieces are made to plug into each other, the systems we integrate rarely are. 
      Integration frameworks aim to fill this gap. As an integrator, you’re less concerned about how the system 
      you integrate works and more focused on how to interoperate with it from the outside.
        1.1 Introducing to Camel
          Camel is an integration framework that aims to make your integration projects productive and fun. (2007)
          http://camel.apache.org/why-the-name-camel.html
          http://camel.apache.org/user-guide.html
          https://github.com/apache/camel/blob/master/README.md
          https://github.com/apache/camel/blob/master/examples/README.adoc#examples
            ■ What is Camel?
              At the core of the Camel framework is a routing engine, or more precisely a routingengine
			  builder. It allows you to define your own routing rules, decide from which
			  sources to accept messages, and determine how to process and send those messages to
			  other destinations. Camel uses an integration language that allows you to define complex
			  routing rules, akin to business processes.
              We should also mention what Camel isn’t an enterprise service bus (ESB), although some call 
              Camel a lightweight ESB because of its support for routing, transformation, monitoring, orchestration, and so forth.
              Camel doesn’t have a container or a reliable message bus, but it can be deployed in one. (JBoss Fuse/Service Mix
              Trend ESB/Mule ESB...)
		    ■ Why use Camel?
		      Camel introduces a few novel ideas into the integration space, which is why its authors
			  decided to create Camel in the first place, instead of using an existing framework.
			  <> Routing and mediation engine   <> Enterprise integration patterns (EIPs)
			  <> Domain-specific language (DSL) <> Extensive component library
			  <> Payload-agnostic router        <> Modular and pluggable architecture
			  <> POJO model                     <> Easy configuration
			  <> Automatic type converters      <> Lightweight core
			  <> Test kit 					    <> Vibrant community
        1.2 Getting Started
          Download it from: http://camel.apache.org/download.html.
          Copy to C:\Apache\apache-camel-2.20.2
            -> http://javainuse.com/camel/camel_spring
        1.3 Camel's Message Model
          In Camel, there are two abstractions for modeling messages
            <> org.apache.camel.Message  -> The fundamental entity containing the data being carried and routed in Camel
            <> org.apache.camel.Exchange -> The Camel abstraction for an exchange of messages. (Has in/out messages)
            ■ Message
             Messages are the entities used by systems to communicate with each other when using messaging channels. 
             -> Messages flow in one direction from a sender to a receiver
             -> Messages have headers, optional attachments and a body (a payload)
             -> Messages are uniquely identified with an identifier of type java.lang.String.
                For protocols that don’t define a unique message identification scheme, Camel uses its own UID generator.

              HEADERS AND ATTACHMENTS
			   Headers are values associated with the message, such as sender identifiers, hints about content encoding, 
			   authentication information, and so on. Headers are name-value pairs; the name is a unique, case-insensitive 
			   string, and the value is of type java.lang.Object.    
			   Headers are stored as a map within the message. A message can also have optional attachments, which are typically 
			   used for the web service and email components.

			  BODY
			   The body is of type java.lang.Object. That means that a message can store any kind of content.  
			   When the sender and receiver use different body formats, Camel provides a number of mechanisms to transform the
			   data into an acceptable format, and in many cases the conversion happens automatically with type converters, 
			   behind the scenes.

			  FAULT FLAG
			   Messages also have a fault flag. Some protocols and specifications, such as WSDL and JBI, distinguish between 
			   output and fault messages.
            ■ Exchange
             An exchange in Camel is the message’s container during routing. An exchange also provides support for the various 
             types of interactions between systems, also known as message exchange patterns (MEPs). MEPs are used to 
             differentiate between one-way and request-response messaging styles.

             The Camel exchange holds a pattern property that can be either
             .InOnly: A one-way message (Event) -> JMS is often a one-way messaging
             .InOut:  A request-response message -> HTTP-based transports are often request reply
             -> A Camel exchange has an ID, MEP, exception, and properties. 
                It also has an in message to store the incoming message and an out message to store the result.
                Exchange ID: A unique ID that identifies the exchange. Camel will generate a default unique ID, if you don’t.
                MEP: A pattern that denotes whether you’re using the InOnly or InOut messaging style
                Exception: If an error occurs at any time during routing, an Exception will be set in the exception field.
                Properties: Similar to message headers, but they last for the duration of the entire exchange
                In Message: This is the input message, which is mandatory.
                Out Message: This is an optional message that only exists if the MEP is InOut.
        1.4 Camel's architecture
         Let’s now turn our attention to Camel’s architecture. We’ll first take a look at the highlevel
		 architecture and then drill down into the specific concepts.
		    Architecture from 10,000 feet
		     At a high level, Camel is composed of processors, components, and routes. 
		     All of these are contained within the CamelContext.
		     The routing engine uses routes as specifications for where messages are routed. Routes are defined using one of 
		     Camel’s domain-specific languages (DSLs). Processors are used to transform and manipulate messages during routing
		     and also to implement all the EIP patterns, which have corresponding keywords in the DSL languages.
		     Components are the extension points in Camel for adding connectivity to other systems.

		    CAMEL CONTEXT
		     The CamelContext provides access to many useful services, the most notable being components, type converters, a 
		     registry, endpoints, routes, data formats, and languages.
		     
		     SERVICE     DESCRIPTION
		     Components   Components Contains the components used. Camel is capable of loading components on the fly
						  either by autodiscovery on the classpath or when a new bundle is activated in an OSGi container.
             Endpoints    Contains the endpoints that have been created.
             Routes       Contains the routes that have been added.
             Type-        Contains the loaded type converters. Camel has a mechanism that allows you to manually
             converters   or automatically convert from one type to another
             Data formats Contains the loaded data formats.
             Registry 	  Contains a registry that allows you to look up beans. By default, this will be a JNDI registry.
						  If you’re using Camel from Spring, this will be the Spring ApplicationContext. It can
						  also be an OSGi registry if you use Camel in an OSGi container.
		     Languages    Contains the loaded languages. Camel allows you to use many different languages to create 
		     			  expressions. You’ll get a glimpse of the XPath language in action when we cover the DSL.
		    ROUTING ENGINE
			 Camel’s routing engine is what actually moves messages under the hood. This engine isn’t exposed to the developer,
			 but you should be aware that it’s there and that it does all the heavy lifting, ensuring that messages are routed 
			 properly.
			ROUTES
			 Routes are obviously a core abstraction for Camel. The simplest way to define a route is as a chain of processors. There are many reasons for using routers in messaging applications. By decoupling clients from servers, and producers from consumers, routes can:
			  ■ Decide dynamically what server a client will invoke
			  ■ Provide a flexible way to add extra processing
			  ■ Allow for clients and servers to be developed independently
			  ■ Allow for clients of servers to be stubbed out (using mocks) for testing purposes
			  ■ Foster better design practices by connecting disparate systems that do one thing well
			  ■ Enhance features and functionality of some systems (such as message brokers and ESBs)
			DOMAIN-SPECIFIC LANGUAGE (DSL)
             To wire processors and endpoints together to form routes, Camel defines a DSL.
             Camel provides multiple DSL languages, so you could define the same route using the Spring DSL.
              Java API; Spring XML;
            PROCESSOR
             The processor is a core Camel concept that represents a node capable of using, creating,
			 or modifying an incoming exchange. Many of the processors are implementations of EIPs, but one could
		     easily implement their own custom processor and insert it into a route.
		    COMPONENT
		     From a programming point of view, components are fairly simple: they’re associated
 			 with a name that’s used in a URI, and they act as a factory of endpoints.
 			ENDPOINT
			 An endpoint is the Camel abstraction that models the end of a channel through which a system can send or receive 
			 messages. In Camel, you configure endpoints using URIs, such as file:data/inbox?delay=5000, and you also refer to 
			 endpoints this way.
			PRODUCER
			 A producer is the Camel abstraction that refers to an entity capable of creating and sending a message to an endpoint
			 When a message needs to be sent to an endpoint, the producer will create an exchange and populate it with data 
			 compatible with that particular endpoint.
			 When a message needs to be sent to an endpoint, the producer will create an exchange and populate it with data 
			 compatible with that particular endpoint
			CONSUMERS
			 A consumer is the service that receives messages produced by a producer, wraps them in an exchange, and sends
 			 them to be processed. Consumers are the source of the exchanges being routed in Camel.
 			EVENT-DRIVEN CONSUMER
             The most familiar consumer is probably the event-driven consumer.
             An event-driven consumer waits idle until a message arrives, at which point it wakes up and consumes the message
            POLLING CONSUMER
             A polling consumer actively checks for new messages.
    @2.Message Rout-Creation  [Routing Overview, Creating & Configuring Routes (Java DSL/Spring XML)]
      Oneof the most important features of Camel is routing; without it, Camel would essentially be a lib of transport connectors.
      Routing happens in many aspects of everyday life. When you mail a letter, for instance, it may be routed through several 
      cities before reaching its final address. An email you send will be routed through many different computer network systems 
      before reaching its final destination. In all cases, the router’s function is to selectively move the message forward.
      In the context of enterprise messaging systems, routing is the process by which a message is taken from an input queue and,
      based on a set of conditions, sent to one of several output queues.
      -> In Apache Camel, routing is a more general concept. It’s defined as a step-by-step movement of the message, which
      originates from an endpoint in the role of a consumer. The consumer could be receiving the message from an external 
      service, polling for the message on some system, or even creating the message itself. This message then flows through a 
      processing component, which could be an enterprise integration pattern (EIP), a processor, an interceptor, or some other 
      custom creation. The message is finally sent to a target endpoint that’s in the role of a producer. A route may have many 
      processing components that modify the message or send it to another location, or it may have none, in which case it would 
      be a simple pipeline.
        2.1 Introducing Rider Auto Parts
         Our fictional motorcycle parts business, Rider Auto Parts, supplies parts to motorcycle manufacturers. Over the years, 
         they’ve changed the way they receive orders several times.
          -> comma-separated value (CSV) files to an FTP server
          -> XML messages over HTTP.
         Throughout the book, you’ll help Rider Auto Parts implement their current requirements and new functionality using Camel.
         As a first assignment, you’ll need to implement the FTP module in the Rider order frontend system
         Implementing the FTP module will involve the following steps:
		   1 Polling the FTP server and downloading new orders
		   2 Converting the order files to JMS messages
		   3 Sending the messages to the JMS incomingOrders queue
		  -> you’ll need to understand:
		    How to communicate over FTP and JMS using Camel’s endpoints
		    Routing with the Java
		2.2 Understanding endpoints
		 An endpoint is an abstraction that models the end of a message channel through which a system can send or receive msgs. 
		 In this section, we’re going to explain how you can use URIs to configure Camel to communicate over FTP and JMS.
		    ■ Working with files over FTP
		     One of the things that make Camel easy to use is the endpoint URI.
		     By specifying a URI, you can identify the component you want to use and how that component is configured.
		     You can then decide to either send messages to the component configured by this URI, or to consume messages from it.

		      -> To download new orders from the FTP server, you need to do the following:
		        1 Connect to the rider.com FTP server on the default FTP port of 21
				2 Provide a username of “rider” and password of “secret”
				3 Change the directory to “orders”
				4 Download any new order files
		        => Camel will first look up the ftp scheme in the component registry, which will resolve to the FtpComponent. 
		        The FtpComponent then works as a factory, creating the FtpEndpoint based on the remaining ContextPath/Options.

			    URI 
			     You can easily configure Camel to do this by using URI notation
			      -> ftp://rider:secret@rider.com/orders
			      -> ftp://rider.com/orders?username rider&password secret
			     .Scheme      -> 'ftp:'
			     .Context Path-> 'rider.com/orders'
			     .Options     -> 'username rider&password secret'
			    FTPComponent
			     The FtpComponent isn’t part of the camel-core module, so you have to add an additional dependency.
			        [camel-ftp] (dependency)
			         <dependency>
					   <groupId>org.apache.camel</groupId>
					   <artifactId>camel-ftp</artifactId>
					   <version>?</version>
					 </dependency>
				 This endpoint URI would work equally well in a consumer or producer scenario.
				 Now, We'll be Using it to download orders from the FTP server, to do so we need to use it in a from node (DSL):
				    -> from("ftp://rider.com/orders?username=rider&password=secret")
	        ■ Sending to a JMS queue
	          Camel provides extensive support for connecting to JMS-enabled providers. (@7)

	            WHAT IS JMS ?
	             (Java Message Service) is a Java API that allows you to create, send, receive, and read messages.
	             It also mandates that messaging is asynchronous and has specific elements of reliability, like guaranteed and 
	             once-and-only-once delivery. JMS is the de facto messaging solution in the Java community.
	             In JMS, message consumers and producers talk to one another through an intermediary—a JMS destination.

	             A destination can be either a
	              -> Queue: Queues are strictly point-to-point, where each message has only one consumer
	              -> Topic: Topics operate on a publish/subscribe scheme; a single message may be delivered to many consumers. 
	                       (If they have subscribed to the topic.)

	             JMS also provides a ConnectionFactory that clients (like Camel) can use to create a connection with a JMS 
	             provider. JMS providers are usually referred to as brokers because they manage the communication between a 
	             message producer and a message consumer.
	            HOW TO CONFIGURE CAMEL TO USE A JMS PROVIDER
	             To connect Camel to a specific JMS provider, you need to configure Camel’s JMS component with an appropriate 
	             ConnectionFactory. Apache ActiveMQ is one of the most popular open source JMS providers, and it’s the primary 
	             JMS broker that the Camel team uses to test the JMS component
	                -> To create an ActiveMQConnectionFactory
	                 ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");

	                 The 'vm://localhost' URI means that you should connect to an embedded broker named “localhost” running 
	                 inside the current JVM. The vm transport connector in ActiveMQ creates a broker on demand if one isn’t 
	                 running already. In production scenarios we recommend that connection pooling be used when connecting to a 
	                 JMS broker.
	                -> Next, when you create your CamelContext, you can add the JMS component as follows:
				 	 CamelContext context = new DefaultCamelContext(); 
				 	 context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));  
				 	-> Add Dependencies
				 	 In order to use the JMS component and the ActiveMQ-specific connection factory
				 	 <dependency>
					   <groupId>org.apache.camel</groupId>
					   <artifactId>camel-jms</artifactId>
					   <version>?</version>
					 </dependency> 
					 <dependency>
					   <groupId>org.apache.activemq</groupId>
					   <artifactId>activemq-core</artifactId>
					   <version>?</version>
					 </dependency>
			    USING URIS TO SPECIFY THE DESTINATION
			     Once the JMS component is configured, you can start sending and receiving JMS messages.
			     Let’s say you want to send a JMS message to the queue named incomingOrders. 
			        -> The destination URI in this case would be:
				      jms:queue:incomingOrders
	    2.3 Creating routes in Java
	     RouteBuilders are used to create routes in Camel. Each RouteBuilder can create multiple routes.
	     The addRoutes method of the CamelContext accepts a RoutesBuilder, not just a RouteBuilder. 
	     The RoutesBuilder interface has a single method defined:
			void addRoutesToCamelContext(CamelContext context) throws Exception;

			class MyRouteBuilder extends RouteBuilder {
			  public void configure() throws Exception {
				...
			  }
			}

	               
	              











